/**

 * Auto-generated types based on API schema

 * Generated by axiosflow

 * @generated

 * @timestamp 2025-01-02T16:35:09.222Z

 */

import axios, { AxiosRequestConfig, isAxiosError } from 'axios';

import { BASE_URL, endpoints } from './apiConfig';

import { UserRequest, User } from './types';

interface ApiResponse<T> {
    status: string;
    data: T;
}

/**
 *  * Performs a GET request to /users
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users();
 */
export const get_users = async (
    data?: Record<string, unknown>,
    config?: AxiosRequestConfig
): Promise<User[]> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: Record<string, unknown>) => {
        if (!data) return url;
        let replacedUrl = url;

        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.get_users, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url: baseUrl,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return Array.isArray(response.data.data) ? response.data.data : [response.data.data];
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a POST request to /users
 * @param {undefined} data.name
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await post_users({ name: "example name" });
 */
export const post_users = async (
    data?: UserRequest,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: UserRequest) => {
        if (!data) return url;
        let replacedUrl = url;

        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.post_users, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'POST',
        url: baseUrl,
        data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return response.data.data;
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a GET request to /users/:id
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users_id();
 */
export const get_users_id = async (
    data: { id: string },
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: { id: string }) => {
        if (!data) return url;
        let replacedUrl = url;
        replacedUrl = replacedUrl.replace(':id', data['id'] || '');
        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.get_users_id, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url: baseUrl,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return response.data.data;
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a GET request to /users1
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users1();
 */
export const get_users1 = async (
    data?: Record<string, unknown>,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: Record<string, unknown>) => {
        if (!data) return url;
        let replacedUrl = url;

        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.get_users1, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url: baseUrl,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return response.data.data;
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a POST request to /users1
 * @param {undefined} data.name
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await post_users1({ name: "example name" });
 */
export const post_users1 = async (
    data?: UserRequest,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: UserRequest) => {
        if (!data) return url;
        let replacedUrl = url;

        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.post_users1, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'POST',
        url: baseUrl,
        data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return response.data.data;
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a GET request to /users1/:id
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users1_id();
 */
export const get_users1_id = async (
    data: { id: string },
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: { id: string }) => {
        if (!data) return url;
        let replacedUrl = url;
        replacedUrl = replacedUrl.replace(':id', data['id'] || '');
        return replacedUrl;
    };

    // Construct base URL
    const baseUrl = BASE_URL + replaceUrlParams(endpoints.get_users1_id, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url: baseUrl,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios<ApiResponse<User>>(requestConfig);

        console.log('Full Response:', response);
        console.log('Response Data:', response.data);

        // Check if the response has a successful status and data
        if (response.data.status === 'success' && response.data.data) {
            return response.data.data;
        }

        throw new Error('Invalid response format');
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
            });

            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }

        console.error('General Error:', error);
        throw error;
    }
};
